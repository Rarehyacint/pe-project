{% from 'components/core/show-nav-item' import show_nav_item %}
{% from 'components/core/breadcrumbs' import breadcrumb %}
{% from 'components/core/show-header' import show_header %}
{% from 'components/core/show-item' import show_item %}
{% import 'components/core/forms' as forms %}

{% extends 'components/core/faculty-layout' %}

{% block content %}

{{ breadcrumb() }}
<div class="flex flex-col mx-4 pl-4">
    <div class="flex justify-between">
    <h1 class="font-bold text-4xl">{{ question.name }}</h1>
    <div class="flex flex-col gap-y-1">
        <button form="delete-form" type="submit" class="cursor-pointer bg-red-600 text-gray-200 hover:bg-red-500 hover:text-white duration-300 rounded-lg p-3 font-semibold text-sm">Delete question</button>
        {% if session('error') %} <p class="text-xs font-semibold text-red-500 italic">{{ session('error') }}</p> {% endif %}
    </div>
    </div>
    <div class="flex flex-col pt-1 gap-y-0.5">
        <span class="pl-2 text-xs text-gray-400 font-semi">ID : {{ question.id }}</span>
    </div>
</div>

<div class="flex flex-1 flex-col gap-y-4">
    <div class="flex max-w-full gap-x-4 overflow-x-auto mx-auto rounded-xl bg-white p-2 shadow-sm ring-1 ring-gray-950/5 ">
        {{ show_nav_item('/questions/'~question.id, 
                        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
                            <path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
                            <path fill-rule="evenodd" d="M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 0 1 0-1.113ZM17.25 12a5.25 5.25 0 1 1-10.5 0 5.25 5.25 0 0 1 10.5 0Z" clip-rule="evenodd" />
                        </svg>',
                        'View') }}
        {{ show_nav_item('/questions/'~question.id~'/edit', 
                        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
                            <path d="M21.731 2.269a2.625 2.625 0 0 0-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 0 0 0-3.712ZM19.513 8.199l-3.712-3.712-12.15 12.15a5.25 5.25 0 0 0-1.32 2.214l-.8 2.685a.75.75 0 0 0 .933.933l2.685-.8a5.25 5.25 0 0 0 2.214-1.32L19.513 8.2Z" />
                        </svg>',
                        'Edit') }}
        {{ show_nav_item('/questions/'~question.id~'/discussion', 
                        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" fill="currentColor" class="size-5">
                            <path d="M80 160c0-35.3 28.7-64 64-64l32 0c35.3 0 64 28.7 64 64l0 3.6c0 21.8-11.1 42.1-29.4 53.8l-42.2 27.1c-25.2 16.2-40.4 44.1-40.4 74l0 1.4c0 17.7 14.3 32 32 32s32-14.3 32-32l0-1.4c0-8.2 4.2-15.8 11-20.2l42.2-27.1c36.6-23.6 58.8-64.1 58.8-107.7l0-3.6c0-70.7-57.3-128-128-128l-32 0C73.3 32 16 89.3 16 160c0 17.7 14.3 32 32 32s32-14.3 32-32zm80 320a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"/>
                        </svg>',
                        'Discussion') }}
    </div>  
    {% if question.question_type.value == 'coding' %}
        <div id="question-type-content"
            hx-post='/questions/load/question-type'
            hx-headers='{"X-CSRF-TOKEN": "{{ csrf_token( )}}"}'
            hx-target='#question-type-content',
            hx-vals='{"question_id": "{{ question.id }}", "edit": true, "type":"{{ question.question_type.value }}"}',
            hx-trigger='load'
            hx-swap="outerHTML">
        </div>
    {% else %}
        <form hx-patch="{{ route('questions.update', { question:question } ) }}" hx-redirect="/questions" hx-target="#question-type-content"  hx-select-oob="#name-form-error, #points-form-error, #topic" class="flex flex-col gap-y-4">
            {{ csrf_field() }}
            <div class="flex max-w-full mx-8 rounded-xl bg-white px-2 shadow-sm ring-1 ring-gray-950/5">
                <div class="flex flex-col p-4 flex-1">
                    {{ show_header('Details') }}
                    <div class="flex gap-x-32 justify-between w-full">
                        <div class="flex flex-col gap-y-4 w-full">
                            {{ forms.form_field(
                                label:forms.label(
                                    id:'type', 
                                    content:'Type', 
                                    attributes:{
                                        'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900  after:text-red-500 after:content-[\'\*\']'}
                                ),
                                input:forms.select(
                                    name:'type', 
                                    values:question_types,
                                    value:question.question_type.value,
                                    attributes:{
                                        'class':'block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6',
                                        'required':true,
                                        'hx-post':'/questions/load/question-type',
                                        'hx-headers': '{"X-CSRF-TOKEN": "' ~ csrf_token() ~ '"}',
                                        'hx-target':'#question-type-content',
                                        'hx-vals': '{"question_id": "' ~ question.id ~ '", "edit": true}',
                                        'hx-trigger' :'load, change'
                                    }
                                ),
                                isColumn:true 
                            )}}
                            <div id="question-name-form">
                                {{ forms.form_field(
                                    label:forms.label(
                                        id:'name', 
                                        content:'Name', 
                                        attributes:{
                                            'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900  after:text-red-500 after:content-[\'\*\']'}
                                    ),
                                    input:forms.textarea(
                                        name:'name', 
                                        value:question.name,
                                        attributes:{
                                            'class':'block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6',
                                            }
                                    ),
                                    isColumn:true 
                                )}}
                                <div id="name-form-error" class="flex gap-x-4 justify-between"></div>
                                </div>
                                                        <div>
                                <span class="whitespace-nowrap text-sm/6 font-medium text-gray-900  after:text-red-500 after:content-[\'\*\']">Question Level</span>
                                {% set values = {
                                    'remember' : 'üß† Remember', 
                                    'understand' : 'üìñ Understand',
                                    'apply' : 'üõ†Ô∏è Apply', 
                                    'analyze' : 'üß© Analyze',
                                    'evaluate' : 'üìù Evaluate', 
                                    'create' : 'üé® Create'
                                } %}

                                {{ forms.form_field(
                                    input: forms.radio(
                                        name: 'question_level',
                                        values: values,
                                        value:level,
                                        attributes: {
                                            'class': 'opacity-0  -ml-[1rem]',
                                            'required' : true
                                        },
                                        label_attributes: {
                                            'class': 'flex items-center  gap-1 px-2 py-1 min-w-fit bg-gray-100 rounded-full cursor-pointer has-checked:bg-blue-100 has-checked:text-blue-900 has-checked:font-semibold text-xs'
                                        }))
                                }}
                                <div id="question-level-form-error" class="flex gap-x-4 justify-between"></div>
                            </div>
                            <div class="flex flex-col gap-1">
                                <div class="flex justify-left items-center gap-x-2">
                                    <label  for="tag-input"
                                            class="whitespace-nowrap text-sm/6 font-medium text-gray-900 ">
                                        Optional tags:
                                    </label>                        
                                    <input  type="text" 
                                            id="tag-input" 
                                            placeholder="Type tag and press Enter"
                                            class="rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6" />
                                </div>
                                <div id="tags-container" data-initial-tags="{{ optional_tags|json_encode|e('html_attr') }}"></div>

                                <input type="hidden" name="optional_tags" id="optional-tags" />
                            </div>
                        </div>
                        {% if is_in_exam %}
                        <div class="flex flex-1/2 flex-col gap-y-4 w-full">
                                {{ forms.form_field(
                                    label:forms.label(
                                        id:'subject-none', 
                                        content:'Subject', 
                                        attributes:{
                                            'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900'}
                                    ),
                                    input:forms.text(
                                        name:'subject-none', 
                                        value: question.topic.subject.name,
                                        attributes:{
                                            'class':'block w-full cursor-not-allowed rounded-md bg-gray-100 px-3 py-1.5 outline-1 -outline-offset-1 outline-gray-300 text-gray-400 sm:text-sm/6',
                                            'disabled':true}
                                    ),
                                    isColumn:true 
                                )}}
                                {{ forms.form_field(
                                    label:forms.label(
                                        id:'topic-none', 
                                        content:'Topic', 
                                        attributes:{
                                            'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900'}
                                    ),
                                    input:forms.text(
                                        name:'topic-none', 
                                        value: question.topic.name,
                                        attributes:{
                                            'class':'block w-full cursor-not-allowed rounded-md bg-gray-100 px-3 py-1.5 outline-1 -outline-offset-1 outline-gray-300 text-gray-400 sm:text-sm/6',
                                            'disabled':true}
                                    ),
                                    isColumn:true 
                                )}}
                                <span class="text-xs italic text-gray-900 font-semibold">Subject and topic cannot be edited if question is in exam.</span>
                        </div>
                        {% else %}
                            <div class="flex flex-1/2 flex-col gap-y-4 w-full"  hx-sync="this:queue">
                                {{ forms.form_field(
                                    label:forms.label(
                                        id:'subject', 
                                        content:'Subject', 
                                        attributes:{
                                            'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900 after:text-red-500 after:content-[\'\*\']'}
                                            ),
                                    input:forms.select(
                                        name:'subject', 
                                        values:subjects, 
                                        value:question.topic.subject.id,
                                        attributes:{
                                            'class':'flex-1 cursor-pointer block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6',
                                            'placeholder':'Select a Subject',
                                            'disable':true,
                                            'hx-get' :'/questions/create/subjects?topic_id=' ~ question.topic_id,
                                            'hx-target': '#topics',
                                            'hx-select': '#topics',
                                            'hx-swap':'outerHTML',
                                            'hx-trigger':'load, change',
                                            'id': 'subjects'}
                                    ),
                                    isColumn:true 
                                )}}
                                {{ forms.form_field(
                                    label:forms.label(
                                        id:'topic', 
                                        content:'Topic', 
                                        attributes:{
                                            'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900 after:text-red-500 after:content-[\'\*\']'}
                                            ),
                                    input:forms.select(
                                        name:'topic',
                                        value:question.topic.id,
                                        attributes:{
                                            'class':'flex-1 cursor-pointer block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6',
                                            'placeholder':'Select a Topic',
                                            'required':true,
                                            'id': 'topics'}
                                    ),
                                    isColumn:true 
                                )}}
                                {{ forms.form_field(
                                    label:forms.label(
                                        id:'author', 
                                        content:'Author', 
                                        attributes:{
                                            'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900'}
                                    ),
                                    input:forms.text(
                                        name:'author', 
                                        value:question.author.getFullName(),
                                        attributes:{
                                            'class':'block w-full cursor-not-allowed rounded-md bg-gray-100 px-3 py-1.5 outline-1 -outline-offset-1 outline-gray-300 text-gray-400  sm:text-sm/6',
                                            'disabled':true}
                                    ),
                                    isColumn:true 
                                )}}
                            </div>
                        {% endif %}
                    </div>
                </div>  
            </div>

            <div id="question-type-content" class="flex max-w-full mx-8 rounded-xl bg-white px-2 shadow-sm ring-1 ring-gray-950/5">
            </div>

            <div class="flex gap-x-2 mx-8">
                <button type="submit" class="cursor-pointer bg-blue-900 text-gray-200 hover:bg-blue-600 hover:text-white duration-300 rounded-lg px-2 py-1 font-semibold text-sm">Edit Question</button>
                <a href="{{ app.request.headers.get('referer') }}" class="cursor-pointer bg-white border-1 border-gray-600 text-gray-900 hover:bg-red-500 hover:border-white hover:text-white duration-300 rounded-lg p-2 font-semibold">Cancel</a>

            </div>
        </form>
    {% endif %}

    
    <form method="POST" action="{{ route('questions.destroy', { question:question } ) }}" class="hidden" id="delete-form">
        {{ csrf_field() }}
        {{ method_field('DELETE') }}
    </form>
</div>
{% if question.question_type.value != 'coding' %}
<script>
    const input = document.getElementById("tag-input");
    const container = document.getElementById("tags-container");
    const tagsHiddenInput = document.getElementById('optional-tags');
    const initial_tags = JSON.parse(container.dataset.initialTags);
    const tags = new Set(initial_tags);  
    tags.forEach(tag => addTag(tag));
    updateHiddenInput();

    input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
        e.preventDefault();
        const tag = input.value.trim();
        if (tag && !tags.has(tag)) {
        addTag(tag);
        tags.add(tag);
        updateHiddenInput();
        }
        input.value = "";
    }
    });

    function addTag(tag) {
    const tagEl = document.createElement("span");
    tagEl.className = `
    inline-flex 
    items-center 
    gap-1
    pl-2 pr-1 
    min-w-fit 
    bg-blue-100 
    rounded-full 
    text-blue-900 
    font-semibold 
    text-xs 
    select-none
    mr-1 my-1
    add-tag-animation
    `;

    tagEl.textContent = tag;

    const closeBtn = document.createElement("button");
    closeBtn.innerHTML = "&times;";
    closeBtn.type = "button"; 
    closeBtn.className = `
    text-blue-900
    text-sm 
    font-bold 
    cursor-pointer 
    bg-transparent 
    border-none
    `;


    closeBtn.addEventListener("click", () => {
        tagEl.classList.add("delete-tag-animation");
        
        tagEl.addEventListener("animationend", () => {
            container.removeChild(tagEl);
            tags.delete(tag);
            updateHiddenInput();
        });
    });

    tagEl.appendChild(closeBtn);
        container.appendChild(tagEl);
    }

    function updateHiddenInput() {
    tagsHiddenInput.value = Array.from(tags).join(',');
  }
</script>
{% endif %}
{% endblock %}