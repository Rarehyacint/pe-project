<div id="homepage-exam-report" 
        class="dashboard-animate flex max-w-full mx-4 p-4 gap-2 bg-white rounded-2xl shadow-md">
        <div id="question_exams_data" data-questions="{{ question_exams }}" class="hidden"></div>
        <div id="exam_courses_data" data-exams="{{ exam_courses }}" class="hidden"></div>
        <div id="examination_date_data" data-examinations="{{ examination_dates }}" class="hidden"></div>
        
        <div class="flex justify-between">
            <div class="flex flex-col gap-y-2">
                <div class="flex justify-start">
                    <span class="text-3xl font-bold text-blue-900">
                        Exams
                    </span>
                </div>
                            
            
                <div class="flex  gap-x-1">
                    <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                    <span class="text-2xl font-bold text-gray-900 self-center">
                        {{ count }}
                    </span>
                    <span class="text-xs text-gray-400 font-mono font-semibold self-center mt-auto">Count</span>
                    </div>
                    <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                        <span class="text-2xl font-bold text-green-900 self-center">
                            {{ published_count }}
                        </span>
                        <span class="text-xs text-blue-900/70 font-mono font-semibold self-center mt-auto">Published</span>
                    </div>
                    <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                        <span class="text-2xl font-bold text-orange-900 self-center">
                            {{ unpublished_count }}
                        </span>
                        <span class="text-xs text-orange-700/70 font-mono font-semibold self-center mt-auto">Unpublished</span>
                    </div>
                </div>

                <div class="flex flex-col w-74 max-w-full gap-y-2">
                    <span class="text-md font-bold text-gray-600">Examination Dates</span>
                    <div id="calendar" class="grid grid-cols-7 gap-1 w-full"></div>
                    <span class="text-xs font-semibold text-gray-500 self-end">Month</span>
                </div>
            </div>
    </div>
        

    <div class="w-full pl-4">
        <div id="exam-graph" class="w-full"></div>
    </div>


</div>

<script>
    // Check if exam-graph id is present
    let exam_graph = document.getElementById('exam-graph');
    if (exam_graph){
        // Instantiate necessary variables.
        // exam by question values and exam by courses values
        
        const question_exams_raw_data = document.getElementById('question_exams_data');
        const exam_courses_raw_data = document.getElementById('exam_courses_data');

        const questions = JSON.parse(question_exams_raw_data.dataset.questions);
        const exams = JSON.parse(exam_courses_raw_data.dataset.exams);
        const exam_question_text = questions.map(q =>
            `<b>Id</b>: ${q["id"]}<br>` +
            `<b>Name</b>: ${q["name"]}<br>` +
            `<b>Published?</b>: ${q["is_published"]}<br>` +
            `<b>Exam Date</b>: ${q["examination_date"]}<br>`
        );
        const exam_question_colors = questions.map(d => d.is_published ? 'rgb(49,130,189)' : 'rgb(195,140,60)');

        const exam_courses_text = exams.map(q =>
            `<b>Name</b>: ${q["name"]}<br>` +
            `<b>Abbreviation</b>: ${q["abbreviation"]}<br>`
        );

        // Build traces for the two graphs
        let exam_questions = {
            name:'Exams by Questions',
            x: questions.map(q => q['name']),
            y: questions.map(q => q['question_count']),
            text: exam_question_text,
            textposition: 'none', 
            hoverinfo: 'text',
            hovertemplate:  '<b>No. of Questions</b>: %{y}' +
                            '<br>%{text}<br><extra></extra>',   
            hoverlabel: {
                font: { color: 'white' }      // hover text color
            },
            width:0.8,
            type: 'bar',
            marker: {
                line: { width: 2, color: '#333'},
                color: exam_question_colors,
                opacity:0.7
            }
        };
        let exam_courses = {
            name:'Exams by Courses',
            x: exams.map(e => e['abbreviation']),
            y: exams.map(e => e['exam_count']),
            text: exam_courses_text,
            textposition: 'none', 
            hoverinfo: 'text',
            hovertemplate:  '<b>No. of exams</b>: %{y}' +
                            '<br>%{text}<br><extra></extra>',
            width: 0.7,
            xaxis: 'x2',
            yaxis: 'y2',
            type: 'bar',
            marker: {
                line: { width: 2, color: '#333'},
                color: 'rgb(49,130,189)',
                opacity:0.7
            }
        };
        
        // Insert traces and build layout for graph
        var exam_graph_data = [exam_questions,exam_courses];
        
        var exam_graph_layout = {
            grid: {rows: 2, columns: 1, pattern: 'independent'},
            showlegend: false, 
            title: {
                text: "Exam Composition Report",
                font: {
                    size: 16,
                    color: "#4B5563", 
                    family: "Arial Black, sans-serif" 
                },
                x: 0.5,           // center horizontally
                xanchor: 'center', 
                y: 0.95,          // slightly down from top
                yanchor: 'top'
            },            
            height: 400,
            autosize: true,
            margin: { l: 40, r:10, t: 60, b: 40 },
            
            xaxis: {
                title: {
                    text: 'Exams with questions',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },      
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                },
                showticklabels: false,
            },
            yaxis: {
                title: {
                    text: 'No. of Questions',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },       
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                    }
            },

            xaxis2: { 
                title: {
                    text: 'Courses',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },   
                tickfont: {
                    size: 10,
                    color: 'rgb(107, 107, 107)'
                },
                
            },
            yaxis2: { 
                title: {
                    text: 'No. of Exams',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },    
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                    }
            },
        
        };

        // Render the graph and then resize it 
        Plotly.newPlot('exam-graph', exam_graph_data, exam_graph_layout, { responsive: true })
            .then(() => {
                Plotly.Plots.resize('exam-graph');  
            });

        window.addEventListener("resize", () => {
        Plotly.Plots.resize("exam-graph");   
        });

    }
    
    const examination_dates_raw_data = document.getElementById('examination_date_data');
    const dates_json = JSON.parse(examination_dates_raw_data.dataset.examinations); // ← this is an object
    console.log(examination_dates_raw_data);
    const exams = Object.entries(dates_json).map(([date, data]) => ({
        date,
        count: data.count,
        names: data.names
    }));

    let year = 2025, month = 8; // January
    let firstDay = new Date(year, month, 1).getDay(); // 0=Sun, ... 6=Sat
    let daysInMonth = new Date(year, month + 1, 0).getDate();

  // Map exams to dates
    let examMap = Object.fromEntries(
    exams.map(e => [e.date, { count: e.count, names: e.names }])
    );
    let calendar = document.getElementById("calendar");

    // Utility for heatmap colors
    function bgClass(count) {
    if (count === 0) return "bg-gray-50";
    if (count === 1) return "bg-blue-300 text-white";
    if (count === 2) return "bg-blue-500 text-white";
    return "bg-blue-900 text-white"; // 3 or more
    }

    // Empty cells before the first day
    for (let i = 0; i < firstDay; i++) {
        let empty_cell = document.createElement("div");
        empty_cell.className = "aspect-square";
        calendar.appendChild(empty_cell);
    }

    // Calendar days
    for (let day = 1; day <= daysInMonth; day++) {
        let date = formatDateLocal(new Date(year, month, day));
        let exam_date = examMap[date] ?? {count:0, names:[]};
        let count = exam_date.count;
        let names = exam_date.names;

        let calendar_day_cell = document.createElement("div");
        calendar_day_cell.className = `aspect-square flex flex-col items-center justify-center rounded ${bgClass(count)} cursor-pointer hover:ring-2 hover:ring-blue-500 transition`;
        calendar_day_cell.title = count != 0 
        ? `Jan: ${day} \nNo. of exams: ${count} \nNames:\n- ${names.join('\n- ')}` 
        : 'No exam this day.';

        calendar_day_cell.innerHTML = `
        <span class="text-sm font-medium">${day}</span>
        `;

        calendar.appendChild(calendar_day_cell);
    }
    function formatDateLocal(date) {
        const y = date.getFullYear();
        const m = String(date.getMonth() + 1).padStart(2, '0');
        const d = String(date.getDate()).padStart(2, '0');
        return `${y}-${m}-${d}`;
    }
</script>