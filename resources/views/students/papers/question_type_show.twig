{% import 'components/core/forms' as forms %}
{% from 'components/core/show-header' import show_header %}

{% if question.question_type.value == 'multiple_choice' %}
    {% set values = {} %}

    {% for choice in question_type_data.choices.choices %}
        {% set values = values | merge({ (choice.choice_key): choice.item }) %}
    {% endfor %}

    {{ forms.form_field(
        input: forms.radio(
            name: 'answer',
            values: values,
            value: question_type_data.student_answer.answer|trim ?: '',
            attributes: {
                'class': 'accent-blue-900 w-6 h-6 rounded-full'
            },
            label_attributes: {
                'class': 'flex items-center gap-2 py-4 pl-4 pr-8 m-1 min-h-16 bg-gray-50 rounded-lg border border-gray-100 cursor-pointer has-checked:bg-blue-900 has-checked:text-white has-checked:font-semibold'
            }
        ),
        isColumn: true
        ) 
    }}
{% endif %}

{% if question.question_type.value == 'true_or_false' %}
  {% set values = {
        'true' : 'True',
        'false' : 'False',
    } %}

    {{ forms.form_field(
        input:forms.radio(
            name:'answer',
            values: values,
            value: question_type_data.student_answer.answer|trim ?: '',
            attributes:{    
                'class':'min-w-6 min-h-6 rounded-full relative flex items-center justify-center',
                },
            label_attributes:{
                'class':'flex items-center gap-2 py-4 pl-4 pr-8 m-1 min-h-16 bg-gray-50 rounded-lg border border-gray-100 cursor-pointer has-checked:bg-blue-900 has-checked:text-white has-checked:font-semibold',
                }),
        isColumn:true)
    }}
{% endif %}

{% if question.question_type.value == 'identification' %}
    {{ forms.form_field(
        label:forms.label(
            id:'answer', 
            content:'Answer', 
            attributes:{
                'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900',}
            ),
        input:forms.text(
            name:'answer',
            value : question_type_data.student_answer.answer,
            attributes:{
                'class':'flex-1 block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6',
                'required':true}),
        isColumn:true
    )}}
{% endif %}

{% if question.question_type.value == 'ranking' %}
    <div class="sortable bg-gray-50 p-4 rounded-lg">
        {% for i in range(1, question_type_data.choices|length) %}
            <div class="flex gap-x-4">
            {{ forms.form_field(
                label:forms.label(
                    id: 'answer[]', 
                    content:'☰', 
                    attributes:{
                        'class':'handle cursor-grab active:cursor-grabbing whitespace-nowrap text-xl font-bold text-blue-900'}
                    ),
                input:forms.text(
                    name:'answer[]',
                    value:  question_type_data.student_answer[i-1]['answer'] ?: question_type_data.choices[i-1]['solution'],
                    attributes:{
                        'class':'flex-1 block w-full rounded-md bg-white px-3 py-1.5 font-semibold text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6 cursor-default',
                        'readonly':true
                    }),
                isReverse: true
            )}}
            </div>
        {% endfor %}
    </div>
    <script>
        htmx.onLoad(function(content) {
            var sortables = content.querySelectorAll(".sortable");
            for (var i = 0; i < sortables.length; i++) {
            var sortable = sortables[i];
            var sortableInstance = new Sortable(sortable, {
                animation: 150,
                ghostClass: 'blue-background-class',
                handle: '.handle',
                swap: true,
                swapClass: 'swap-highlight',
            });
            
            // Re-enable sorting on the `htmx:afterSwap` event
            sortable.addEventListener("htmx:afterSwap", function() {
                sortableInstance.option("disabled", false);
            });
            }
        })
    </script>
{% endif %}

{% if question.question_type.value == 'matching' %}
   {% for i in range(1, question_type_data.choices|length) %}
        <div class="flex justify-center bg-gray-50 p-4 gap-x-4 rounded-lg">
            <div class="flex flex-col max-w-72">
                {{ forms.form_field(
                    label:forms.label(
                        id: 'answer[' ~ (i) ~ '][left]', 
                        content: question_type_data.student_answer[i-1]['first_item_answer'] ?: question_type_data.choices[i-1]['left'], 
                        attributes:{
                            'class':'w-fit text-pretty shrink-0 rounded-md cursor-default bg-white p-4 font-semibold text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:ring-0 sm:text-sm/6'}
                        ),
                    input:forms.text(
                        name:'answer[' ~ (i) ~ '][left]',
                        value: question_type_data.student_answer[i-1]['first_item_answer'] ?: question_type_data.choices[i-1]['left'],
                        attributes:{
                            'class':'hidden',
                            'readonly': true
                        })
                )}}
            </div>
            <div class="flex flex-1 border-t-5 border-dotted border-gray-600 w-full my-auto"></div>
            <div class="flex flex-1 sortable shrink-0">
                {{ forms.form_field(
                    label:forms.label(
                        id: 'answer[' ~ (i) ~ '][right]', 
                        content:'☰', 
                        attributes:{
                            'class':'handle cursor-grab active:cursor-grabbing whitespace-nowrap text-xl font-bold text-blue-900'}
                        ),
                    input:forms.text(
                        name:'answer[' ~ (i) ~ '][right]',
                        value:  question_type_data.student_answer[i-1]['second_item_answer'] ?: question_type_data.choices[i-1]['right'],
                        attributes:{
                            'class':'flex-1 w-fit rounded-md shrink-0 whitespace-nowrap text-center cursor-default bg-blue-900 px-3 py-4 font-semibold text-white outline-0 -outline-offset-0 focus:ring-0 sm:text-sm/6',
                            'readonly': true
                        }),
                    isReverse: true
                )}}
            </div>   
        </div>
    {% endfor %}
<script>
    htmx.onLoad(function(content) {
        var sortables = content.querySelectorAll(".sortable");
        for (var i = 0; i < sortables.length; i++) {
        var sortable = sortables[i];
        var sortableInstance = new Sortable(sortable, {
            animation: 150,
            group: 'shared',
            ghostClass: 'blue-background-class',
            handle: '.handle',
            swap: true,
            swapClass: 'swap-highlight',
            onEnd: function (evt) {
                const swap_chosen = evt.item;
                const to_swap = evt.swapItem;

                if (!swap_chosen || !to_swap) return;

                const swap_chosen_input = swap_chosen.querySelector('input');
                const to_swap_input = to_swap.querySelector('input');
                const swap_chosen_label = swap_chosen.querySelector('label');
                const to_swap_label = to_swap.querySelector('label');

                if (swap_chosen_input && to_swap_input && swap_chosen_label && to_swap_label) {
                // Swap label text
                [swap_chosen_label.textContent, to_swap_label.textContent] = [to_swap_label.textContent, swap_chosen_label.textContent];

                // Swap name
                [swap_chosen_input.name, to_swap_input.name] = [to_swap_input.name, swap_chosen_input.name];

                // Swap id
                [swap_chosen_input.id, to_swap_input.id] = [to_swap_input.id, swap_chosen_input.id];

                // Update corresponding labels' for attribute
                swap_chosen_label.htmlFor = swap_chosen_input.id;
                to_swap_label.htmlFor = to_swap_input.id;
                }
            }
        });
        

        // Re-enable sorting on the `htmx:afterSwap` event
        sortable.addEventListener("htmx:afterSwap", function() {
            sortableInstance.option("disabled", false);
        });
        }
    })
</script>
{% endif %}

{% if question.question_type.value == 'coding' %}
<div id="coding-question"
     data-instruction='{{ question_type_data.choices.instruction_raw|json_encode|e("html_attr") }}'
     data-language-codes='{{ question_type_data.choices.language_codes|json_encode|e("html_attr") }}'
     class="flex flex-col"
    >
        <textarea class="hidden" name="answer[code]" id="answer-input"></textarea>

        <div class="flex md:flex-row max-w-full w-full">
            <div class="flex flex-1 w-full md:w-1/2 flex-col rounded-xl shadow-sm ring-1 ring-gray-950/5">
                <div class="flex flex-1 rounded-t-md">
                    <div class="flex flex-col flex-1 w-full ">
                        <div class="flex w-full bg-gray-800 p-2 rounded-t-md justify-between">
                            <h1 class="text-gray-50 p-2 font-semibold text-lg">
                                Instruction
                            </h1>
                        </div>
                        <div id="instruction-div" class="htmx-animate max-w-full w-full overflow-auto border-2 border-gray-500">
                            <div class="htmx-animate flex flex-1 flex-col prose prose-sm max-w-none p-4">
                                {{ question_type_data.choices.instruction|raw }}  
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="flex flex-1 w-full md:w-1/2  flex-col ml-8 rounded-xl bg-white p-4 shadow-sm ring-1 ring-gray-950/5">
                <div class="flex flex-col flex-1 min-w-0 ">
                    <div class="flex h-18 pb-4 justify-between">
                        <div class="flex">
                            {{ forms.form_field(
                                label:forms.label(
                                    id:'answer[programming_language]', 
                                    content:'Programming Language', 
                                    attributes:{
                                        'class':'whitespace-nowrap text-sm/6 font-medium text-gray-900 after:text-red-500 after:content-[\'\*\']'}
                                        ),
                                input:forms.select(
                                    name:'answer[programming_language]', 
                                    values: question_type_data.choices.languages,
                                    attributes:{
                                        'class':'flex-1 capitalize cursor-pointer block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6',
                                        'hx-on:change':'switchLanguageFromEvent(event)',
                                        'required':true
                                    }
                                ),
                                isColumn:true
                            )}}
                        </div>
                        <div id="loader" class="htmx-indicator m-auto transition-opacity duration-500 opacity-0 pointer-events-none">
                            <img class="mr-10" width="50" src="{{ asset('images/bars-scale.svg') }}"/>
                        </div>
                            <button form="test-student-code-form" type="submit" name="action" value="test_student_code" id="test-code-button"
                                    class="flex items-center justify-start gap-x-1 cursor-pointer bg-green-900 text-gray-200 hover:bg-green-600 hover:text-white duration-300 rounded-lg p-2 text-sm font-semibold
                                        disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 disabled:fill-gray-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-4">
                                    <path fill-rule="evenodd" d="M12 6.75a5.25 5.25 0 0 1 6.775-5.025.75.75 0 0 1 .313 1.248l-3.32 3.319c.063.475.276.934.641 1.299.365.365.824.578 1.3.64l3.318-3.319a.75.75 0 0 1 1.248.313 5.25 5.25 0 0 1-5.472 6.756c-1.018-.086-1.87.1-2.309.634L7.344 21.3A3.298 3.298 0 1 1 2.7 16.657l8.684-7.151c.533-.44.72-1.291.634-2.309A5.342 5.342 0 0 1 12 6.75ZM4.117 19.125a.75.75 0 0 1 .75-.75h.008a.75.75 0 0 1 .75.75v.008a.75.75 0 0 1-.75.75h-.008a.75.75 0 0 1-.75-.75v-.008Z" clip-rule="evenodd" />
                                    <path d="m10.076 8.64-2.201-2.2V4.874a.75.75 0 0 0-.364-.643l-3.75-2.25a.75.75 0 0 0-.916.113l-.75.75a.75.75 0 0 0-.113.916l2.25 3.75a.75.75 0 0 0 .643.364h1.564l2.062 2.062 1.575-1.297Z" />
                                    <path fill-rule="evenodd" d="m12.556 17.329 4.183 4.182a3.375 3.375 0 0 0 4.773-4.773l-3.306-3.305a6.803 6.803 0 0 1-1.53.043c-.394-.034-.682-.006-.867.042a.589.589 0 0 0-.167.063l-3.086 3.748Zm3.414-1.36a.75.75 0 0 1 1.06 0l1.875 1.876a.75.75 0 1 1-1.06 1.06L15.97 17.03a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
                                    </svg>

                                    Check Syntax
                            </button>
                    </div>

                    <div id="validate-div"></div>

                    
                    <div class="flex flex-col mt-2 gap-y-4 ">
                        <div class="flex flex-1 flex-col rounded-md">
                            <div class="flex w-full bg-gray-800 p-2 rounded-t-md">
                                <p class="bg-gray-800 text-gray-50 font-semibold p-4 text-sm">Initial Solution</p>
                            </div>
                        <div class="flex">
                            <div id="initial-solution-div" class="flex-1 h-[29rem]  overflow-y-auto text-gray-500 border-1 border-gray-500"></div>
                        </div>
                        </div>

                        <div class="flex flex-1 flex-col rounded-md">
                            <div class="flex w-full bg-gray-800 p-2 justify-between rounded-t-md">
                                <p class="bg-gray-800 text-gray-50 font-semibold p-4 text-sm">Sample Test Case</p>
                            </div>         
                            <div class="flex">
                                <div id="test-case-div" class="flex-1 min-h-48 max-h-48 overflow-y-auto text-gray-500 border-1 border-gray-500"></div>
                            </div>
                        </div>
                    </div>       
                </div>
            </div>
        </div>  
        <form   id="test-student-code-form"
        class="hidden"
        hx-post="{{ route('validate.coding.question') }}"
        hx-target="#validate-div"
        hx-swap="outerHTML"
        hx-indicator="#loader"
        hx-select-oob="#debug-popover-div"
        
        onsubmit="testStudentCode()">
        {{ csrf_field() }}
        <!-- Settings -->
        <input type="number" class="hidden" value="{{ question.id }}" name="test_coding_question_id" id="test-coding-question-input">
        <textarea class="hidden" name="student-code-test" id="student-code-test-input" ></textarea>
        <input type="text" class="hidden" name="language-to-validate" id="language-to-validate-input">
</form>
</div>
{% endif %}
